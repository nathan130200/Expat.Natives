name: Build libexpat for Multi-Platform (Raw Build)

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch: # Allows manual triggering

env:
  EXPAT_VERSION: 2.6.2 # Specify the libexpat version you want to build
  CMAKE_VERSION: 3.29.3 # Specify the CMake version to download

jobs:
  build_per_platform:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [x64, x86] # Target architectures
        # Define platform and runtime identifier for .NET structure
        include:
          - os: windows-latest
            platform_id: win
            arch_id_x64: x64
            arch_id_x86: x86
          - os: ubuntu-latest
            platform_id: linux
            arch_id_x64: x64
            arch_id_x86: x86
          - os: macos-latest
            platform_id: osx
            arch_id_x64: x64
            arch_id_x86: x86

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Set up Environment Variables for Current Job
      id: set_env
      run: |
        # Map matrix arch to .NET runtime architecture ID
        if ("${{ matrix.arch }}" -eq "x64") {
          echo "CURRENT_ARCH_ID=${{ matrix.arch_id_x64 }}" >> $GITHUB_ENV
        } else {
          echo "CURRENT_ARCH_ID=${{ matrix.arch_id_x86 }}" >> $GITHUB_ENV
        }
        echo "CURRENT_PLATFORM_ID=${{ matrix.platform_id }}" >> $GITHUB_ENV
        echo "RUNTIME_DIR=runtimes/${{ matrix.platform_id }}-${{ env.CURRENT_ARCH_ID }}/native" >> $GITHUB_ENV
      shell: bash

    - name: Download and Setup CMake (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $CMAKE_URL="https://cmake.org/files/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-windows-x86_64.zip"
        $CMAKE_INSTALL_DIR="C:\tools\cmake"
        mkdir -p "$CMAKE_INSTALL_DIR"
        curl -L "$CMAKE_URL" -o cmake.zip
        Expand-Archive -Path cmake.zip -DestinationPath "$CMAKE_INSTALL_DIR"
        # The zip extracts into a folder like cmake-3.29.3-windows-x86_64, so we need to go one level deeper
        $extracted_folder = (Get-ChildItem -Path "$CMAKE_INSTALL_DIR").FullName
        echo "Adding $extracted_folder\bin to PATH"
        echo "$extracted_folder\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        Remove-Item cmake.zip
      shell: pwsh

    - name: Download and Setup CMake (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        CMAKE_URL="https://cmake.org/files/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-linux-x86_64.tar.gz"
        CMAKE_INSTALL_DIR="$HOME/tools/cmake"
        mkdir -p "$CMAKE_INSTALL_DIR"
        curl -L "$CMAKE_URL" | tar -xz -C "$CMAKE_INSTALL_DIR" --strip-components=1
        echo "$CMAKE_INSTALL_DIR/bin" >> $GITHUB_PATH
      shell: bash

    - name: Download and Setup CMake (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        CMAKE_URL="https://cmake.org/files/v${{ env.CMAKE_VERSION }}/cmake-${{ env.CMAKE_VERSION }}-macos-universal.tar.gz"
        CMAKE_INSTALL_DIR="$HOME/tools/cmake"
        mkdir -p "$CMAKE_INSTALL_DIR"
        curl -L "$CMAKE_URL" | tar -xz -C "$CMAKE_INSTALL_DIR" --strip-components=1
        echo "$CMAKE_INSTALL_DIR/bin" >> $GITHUB_PATH
      shell: bash

    - name: Install Build Tools (Linux - for x86)
      if: matrix.os == 'ubuntu-latest' && matrix.arch == 'x86'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-multilib g++-multilib

    - name: Download and Extract libexpat Source
      run: |
        SOURCE_URL="https://github.com/libexpat/libexpat/releases/download/R${{ env.EXPAT_VERSION }}/expat-${{ env.EXPAT_VERSION }}"
        if ("${{ matrix.os }}" -eq "windows-latest") {
          curl -LO "${SOURCE_URL}.zip"
          unzip "expat-${{ env.EXPAT_VERSION }}.zip"
        } else {
          curl -LO "${SOURCE_URL}.tar.gz"
          tar -xzf "expat-${{ env.EXPAT_VERSION }}.tar.gz"
        }
      shell: bash

    - name: Configure libexpat (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Use MSVC generator, specifying architecture
        $cmake_generator = "Visual Studio 17 2022" # Adjust VS version as needed
        $cmake_arch = "${{ matrix.arch == 'x64' && 'x64' || 'Win32' }}"
        cd expat-${{ env.EXPAT_VERSION }}
        cmake -S . -B build `
          -G "$cmake_generator" `
          -A "$cmake_arch" `
          -DBUILD_SHARED_LIBS=ON `
          -DEXPAT_BUILD_EXAMPLES=OFF `
          -DEXPAT_BUILD_TESTS=OFF
      shell: pwsh

    - name: Configure libexpat (Linux/macOS)
      if: matrix.os == 'ubuntu-latest' || matrix.os == 'macos-latest'
      run: |
        cd expat-${{ env.EXPAT_VERSION }}
        # Set architecture flags for x86 on Linux
        CMAKE_FLAGS=""
        if [[ "${{ matrix.os }}" == "ubuntu-latest" && "${{ matrix.arch }}" == "x86" ]]; then
          CMAKE_FLAGS="-DCMAKE_C_FLAGS=-m32 -DCMAKE_CXX_FLAGS=-m32"
        fi
        # Set architecture flags for macOS
        if [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          CMAKE_OSX_ARCHITECTURES="${{ matrix.arch == 'x64' && 'x86_64' || 'i386' }}"
          CMAKE_FLAGS="$CMAKE_FLAGS -DCMAKE_OSX_ARCHITECTURES=$CMAKE_OSX_ARCHITECTURES"
          # Note: Building i386 on modern macOS runners might be deprecated or require specific SDKs.
        fi

        cmake -S . -B build `
          -DCMAKE_BUILD_TYPE=Release `
          -DBUILD_SHARED_LIBS=ON `
          -DEXPAT_BUILD_EXAMPLES=OFF `
          -DEXPAT_BUILD_TESTS=OFF `
          $CMAKE_FLAGS
      shell: bash

    - name: Build libexpat
      run: |
        cd expat-${{ env.EXPAT_VERSION }}/build
        cmake --build . --config Release # --config Release is important for Windows MSVC
      shell: bash

    - name: Stage Built Library
      run: |
        mkdir -p "${{ env.RUNTIME_DIR }}"
        $BUILD_OUTPUT_DIR="expat-${{ env.EXPAT_VERSION }}\build\Release"

        if ("${{ matrix.os }}" -eq "windows-latest") {
          $sourceDll = ""
          if (Test-Path "$BUILD_OUTPUT_DIR\expat.dll") {
            $sourceDll = "expat.dll"
            echo "Found expat.dll. Copying and renaming to libexpat.dll."
          } elseif (Test-Path "$BUILD_OUTPUT_DIR\libexpat.dll") {
            $sourceDll = "libexpat.dll"
            echo "Found libexpat.dll directly. Copying as libexpat.dll."
          } else {
            Write-Error "Neither expat.dll nor libexpat.dll found in $BUILD_OUTPUT_DIR"
            exit 1
          }
          # Copy to the desired libexpat.dll name regardless of original name
          Copy-Item "$BUILD_OUTPUT_DIR\$sourceDll" "${{ env.RUNTIME_DIR }}\libexpat.dll" -ErrorAction Stop
          echo "Final Windows DLL staged as ${{ env.RUNTIME_DIR }}\libexpat.dll"
        } elseif ("${{ matrix.os }}" -eq "ubuntu-latest") {
          # Use find to locate, then copy, handling potential versioned libs
          find "expat-${{ env.EXPAT_VERSION }}/build" -name "libexpat.so*" -exec cp {} "${{ env.RUNTIME_DIR }}/" \; || true
          echo "Copied libexpat.so* to ${{ env.RUNTIME_DIR }}"
        } elseif ("${{ matrix.os }}" -eq "macos-latest") {
          # Use find to locate, then copy, handling potential versioned libs
          find "expat-${{ env.EXPAT_VERSION }}/build" -name "libexpat*.dylib" -exec cp {} "${{ env.RUNTIME_DIR }}/" \; || true
          echo "Copied libexpat*.dylib to ${{ env.RUNTIME_DIR }}"
        }
      shell: pwsh # Use PowerShell for cross-platform file operations for consistency

    - name: Upload Platform-Specific Artifact
      uses: actions/upload-artifact@v4
      with:
        name: expat-runtime-${{ env.CURRENT_PLATFORM_ID }}-${{ env.CURRENT_ARCH_ID }}
        path: runtimes/${{ env.CURRENT_PLATFORM_ID }}-${{ env.CURRENT_ARCH_ID }}/
        retention-days: 1 # Only keep for a short time until combined

  combine_and_upload_all_runtimes:
    runs-on: ubuntu-latest
    needs: build_per_platform # This job depends on all build_per_platform jobs completing successfully

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Download All Platform-Specific Artifacts
      uses: actions/download-artifact@v4
      with:
        path: ./runtimes_combined_staging
        # This will download all artifacts, recreating the structure like:
        # runtimes_combined_staging/expat-runtime-win-x64/win-x64/native/expat.dll
        # runtimes_combined_staging/expat-runtime-linux-x64/linux-x64/native/libexpat.so
        # etc.

    - name: Move and Flatten to Final Structure
      run: |
        mkdir -p final_runtimes_artifact

        # Find all 'native' directories and move their contents to the final structure
        find ./runtimes_combined_staging -type d -name "native" | while read -r native_dir; do
          # Extract platform-arch (e.g., win-x64) from the path
          # Example path: ./runtimes_combined_staging/expat-runtime-win-x64/win-x64/native
          relative_path=$(echo "$native_dir" | sed -E 's/.*(win|linux|osx)-(x64|x86)\/native/\1-\2/')
          target_dir="final_runtimes_artifact/runtimes/$relative_path/native"
          mkdir -p "$target_dir"
          cp -r "$native_dir"/* "$target_dir/"
          echo "Moved contents from $native_dir to $target_dir"
        done

    - name: Upload Combined Runtimes Artifact
      uses: actions/upload-artifact@v4
      with:
        name: libexpat-runtimes-all-platforms
        path: final_runtimes_artifact/runtimes/
        retention-days: 30 # Keep the final artifact longer
