name: Build libexpat native binaries

on:
  workflow_dispatch:
  push:
    branches: [ main ]

env:
  EXPAT_VERSION: 2.7.1

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        arch: [x64, x86]

    steps:
    - uses: actions/checkout@v3

    - name: Download expat source
      shell: bash
      run: |
        curl -LO https://github.com/libexpat/libexpat/releases/download/R_${EXPAT_VERSION//./_}/expat-${EXPAT_VERSION}.tar.gz
        tar -xzf expat-${EXPAT_VERSION}.tar.gz

    - name: Configure CMake build
      shell: bash
      run: |
        mkdir build
        cd build
        cmake ../expat-${EXPAT_VERSION} \
          -DBUILD_shared=ON \
          -DBUILD_tools=OFF \
          -DEXPAT_BUILD_TOOLS=OFF \
          -DEXPAT_BUILD_TESTS=OFF \
          -DEXPAT_BUILD_EXAMPLES=OFF \
          -DBUILD_examples=OFF \
          -DBUILD_tests=OFF \
          -DEXPAT_BUILD_DOCS=OFF \
          -DEXPAT_SHARED_LIBS=ON \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DXML_UNICODE=OFF \
          -DEXPAT_CHAR_TYPE=char \
          -DCMAKE_BUILD_TYPE=Release

    - name: Build expat
      shell: bash
      run: |
        cd build
        cmake --build . --config Release

    - name: Copy to runtimes folder
      shell: bash
      run: |
        RID=""
        EXT=""
        FILEPATH=""
        PDBFILE=""

        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          RID="win-${{ matrix.arch }}"
          EXT="dll"
          FILEPATH="build/Release/libexpat.${EXT}"
          PDBFILE="build/Release/libexpat.pdb"
        elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
          RID="linux-${{ matrix.arch }}"
          EXT="so"
          FILEPATH="build/libexpat.${EXT}"
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          RID="osx-${{ matrix.arch }}"
          EXT="dylib"
          FILEPATH="build/libexpat.${EXT}"
        fi

        mkdir -p runtimes/$RID/native
        cp "$FILEPATH" runtimes/$RID/native/
        if [[ -n "$PDBFILE" && -f "$PDBFILE" ]]; then
          cp "$PDBFILE" runtimes/$RID/native/
        fi

    - name: Upload partial artifact
      uses: actions/upload-artifact@v4
      with:
        name: runtimes-${{ matrix.os }}-${{ matrix.arch }}
        path: runtimes/
        retention-days: 1

  merge:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: collected

      - name: Prepare merged folder
        run: |
          mkdir -p merged/runtimes

      - name: Copy runtime folders explicitly
        run: |
          # Lista os artefatos baixados
          for artifact_dir in collected/*; do
            # Cada artifact tem um nome no formato runtimes-<os>-<arch>, ex: runtimes-windows-latest-x86
            artifact_name=$(basename "$artifact_dir")

            # Extraia o runtime-id correto a partir do nome do artifact, exemplo:
            # runtimes-windows-latest-x86 -> win-x86
            if [[ "$artifact_name" =~ runtimes-windows-latest-x86 ]]; then
              rid="win-x86"
            elif [[ "$artifact_name" =~ runtimes-windows-latest-x64 ]]; then
              rid="win-x64"
            elif [[ "$artifact_name" =~ runtimes-linux-latest-x86 ]]; then
              rid="linux-x86"
            elif [[ "$artifact_name" =~ runtimes-linux-latest-x64 ]]; then
              rid="linux-x64"
            elif [[ "$artifact_name" =~ runtimes-macos-latest-x86 ]]; then
              rid="osx-x86"
            elif [[ "$artifact_name" =~ runtimes-macos-latest-x64 ]]; then
              rid="osx-x64"
            else
              echo "Unknown artifact name $artifact_name, skipping"
              continue
            fi

            echo "Copying artifact $artifact_name to merged runtimes/$rid"
            mkdir -p "merged/runtimes/$rid/native"
            cp -v "$artifact_dir/runtimes/$rid/native/"* "merged/runtimes/$rid/native/"
          done

      - name: Create zip with correct structure
        run: |
          cd merged
          zip -r ../native-libs.zip runtimes

      - name: Upload merged zip artifact
        uses: actions/upload-artifact@v4
        with:
          name: native-libs
          path: native-libs.zip
          retention-days: 7

