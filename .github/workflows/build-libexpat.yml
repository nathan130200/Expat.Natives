name: Build libexpat and package for .NET

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  EXPAT_VERSION: 2.7.1
  PACKAGE_ID: XmppSharp.Expat.Native
  PACKAGE_VERSION: 1.0.0
  PACKAGE_AUTHOR: nathan130200

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
        arch: [x64, x86]

    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install NuGet CLI
      run: |
        curl -Lo nuget.exe https://dist.nuget.org/win-x86-commandline/latest/nuget.exe
      shell: bash

    - name: Install dependencies (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        sudo apt-get update || true
        sudo apt-get install -y cmake make gcc g++ || true
        brew install cmake || true

    - name: Download Expat
      shell: bash
      run: |
        curl -LO https://github.com/libexpat/libexpat/releases/download/R_${EXPAT_VERSION//./_}/expat-${EXPAT_VERSION}.tar.gz
        tar -xzf expat-${EXPAT_VERSION}.tar.gz

    - name: Configure build for PInvoke
      shell: bash
      run: |
        mkdir build
        cd build
        cmake ../expat-${EXPAT_VERSION} \
          -DBUILD_shared=ON \
          -DBUILD_tools=OFF \
          -DBUILD_examples=OFF \
          -DBUILD_tests=OFF \
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON \
          -DEXPAT_BUILD_DOCS=OFF \
          -DEXPAT_SHARED_LIBS=ON \
          -DXML_UNICODE=OFF \
          -DCMAKE_BUILD_TYPE=Release \
          -DCMAKE_SHARED_LIBRARY_PREFIX=lib \
          -DCMAKE_SHARED_LIBRARY_SUFFIX=".dll"


    - name: Build
      run: |
        cd build
        cmake --build . --config Release
      shell: bash

    - name: Copy binaries
      shell: bash
      run: |
        mkdir -p out
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          cp build/Release/libexpat.dll out/
        elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
          cp build/libexpat.dylib out/
        else
          cp build/libexpat.so* out/
        fi

    - name: Upload binaries
      uses: actions/upload-artifact@v4
      with:
        name: native-${{ matrix.os }}-${{ matrix.arch }}
        path: out/*

  package:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Download all binaries
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Prepare NuGet structure
      run: |
        mkdir -p nuget/runtimes

        for platform in windows-latest ubuntu-latest macos-latest; do
          for arch in x64 x86; do
            src="artifacts/native-${platform}-${arch}"
            rid=""
            case $platform in
              windows-latest) base="win" ;;
              ubuntu-latest) base="linux" ;;
              macos-latest) base="osx" ;;
            esac
            rid="${base}-${arch}"
            mkdir -p "nuget/runtimes/${rid}/native"
            cp $src/* "nuget/runtimes/${rid}/native/"
          done
        done

        cat > nuget/${PACKAGE_ID}.nuspec <<EOF
        <?xml version="1.0"?>
        <package>
        <metadata>
            <id>${PACKAGE_ID}</id>
            <version>${PACKAGE_VERSION}</version>
            <authors>${PACKAGE_AUTHOR}</authors>
            <description>Native libexpat binaries for .NET P/Invoke usage (Windows, Linux, macOS, x86/x64).</description>
            <packageTypes>
            <packageType name="dotnettool" />
            </packageTypes>
        </metadata>
        <files>
            <file src="runtimes/**/*" target="runtimes" />
        </files>
        </package>
        EOF
      shell: bash
    
    - name: Pack NuGet package
      run: |
        mono nuget.exe pack nuget/${PACKAGE_ID}.nuspec -OutputDirectory nuget/
      shell: bash

    - name: Upload NuGet package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.PACKAGE_ID }}.nupkg
        path: nuget/${{ env.PACKAGE_ID }}.${{ env.PACKAGE_VERSION }}.nupkg
